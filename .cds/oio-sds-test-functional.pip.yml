version: v1.0
name: oio-sds-test-functional
environment: oio-sds-env
jobs:
  - job: Run functional tests
    steps:

      - name: Checkout application
        checkout: '{{ .cds.workspace }}'

      - name: Install dependencies
        script: |+
          #!/bin/bash
          set -x
          . .cds/versions
          echo "deb [trusted=yes] http://read:{{.cds.proj.private_ovh_objectstorage_openio_read_password}}@last-private-ovh-objectstorage-openio.snap-priv.mirrors.ovh.net/ubuntu focal/main main" >> /etc/apt/sources.list.d/obsto.list
          echo "deb [trusted=yes] http://last-public-ovh-pcs.snap.mirrors.ovh.net/ubuntu focal main" >> /etc/apt/sources.list.d/obsto.list
          apt update
          apt install -y $(tr '\n' ' ' < .cds/deps-ubuntu-focal.txt) ${GO_PACKAGE} ${PYTHON_PACKAGE} ${ZOOKEEPER_PACKAGE}
          systemctl stop apache2.service redis.service
          systemctl disable apache2.service redis.service
          # Configure environment
          echo "export PATH=/opt/${GO_PACKAGE}/bin:$PATH" > $HOME/oio-env.sh
          echo "export ZOOBINDIR=/opt/${ZOOKEEPER_PACKAGE}/bin"  >> $HOME/oio-env.sh
          echo "export ZOOLIBDIR=/opt/${ZOOKEEPER_PACKAGE}/lib"  >> $HOME/oio-env.sh
          echo "export ZOOINCDIR=/opt/${ZOOKEEPER_PACKAGE}/include/zookeeper"  >> $HOME/oio-env.sh
          echo 'CMAKE_OPTS="-DENABLE_CODECOVERAGE=on -DCMAKE_INSTALL_PREFIX=/tmp/oio -DLD_LIBDIR=lib -DZK_LIBDIR=${ZOOLIBDIR} -DZK_INCDIR=${ZOOINCDIR}"' >> $HOME/oio-env.sh
          echo "export LD_LIBRARY_PATH=/opt/${GO_PACKAGE}/lib:/opt/${ZOOKEEPER_PACKAGE}/lib:/tmp/oio/lib" >> $HOME/oio-env.sh
          # tox does not read the file pip.conf, it uses the environment variable PIP_INDEX_URL
          echo "export PIP_INDEX_URL=https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/" >> $HOME/oio-env.sh
          source $HOME/oio-env.sh
          mkdir /tmp/oio
          /opt/${PYTHON_PACKAGE}/bin/python3 -m venv $HOME/oiovenv
          cat << EOF > $HOME/oiovenv/pip.conf
          [global]
          index-url = https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/
          EOF
          . $HOME/oiovenv/bin/activate
          env
          # FIXME(adu): Fix tox configuration file to support the new versions
          pip install --upgrade pip setuptools virtualenv "tox<4.0.0" -r test-requirements.txt

          fdbtag="fdb-${FDB_VERSION}"
          worker cache pull $fdbtag
          dpkg -i fdb-packages/*.deb
          systemctl stop foundationdb.service
          systemctl disable foundationdb.service
          rm -rf fdb-packages

      - name: Run functional tests
        script:
          - . $HOME/oio-env.sh
          - pgrep rsyslogd || rsyslogd &
          - sysctl -w kernel.core_pattern='/tmp/core.%p.%E'
          - ulimit -c unlimited
          - ulimit -n 8192
          - . $HOME/oiovenv/bin/activate
          - ./tools/oio-zk-cluster.sh bootstrap {{ .cds.env.ZK_CLUSTER }}
          - ./tools/oio-zk-cluster.sh start {{ .cds.env.ZK_CLUSTER }}
          - ./tools/oio-travis-suites.sh
          - ./tools/oio-zk-cluster.sh stop {{ .cds.env.ZK_CLUSTER }}

      - name: Save failure logs
        always_executed: true
        optional: true
        script:
          - '[ -f everything.log ] && mv everything.log everything.{{.cds.env.TEST_SUITE}}.log && worker upload everything.{{.cds.env.TEST_SUITE}}.log || true'

      - name: Save coverage and test information
        script:
          - mv '{{.cds.workspace}}/.coverage' '{{.cds.workspace}}/.coverage.{{.cds.env.TEST_SUITE}}'
          - mv '/tmp/cmake_coverage.output' '{{.cds.workspace}}/cmake_coverage.{{.cds.env.TEST_SUITE}}'
          - worker upload '{{.cds.workspace}}/.coverage.{{.cds.env.TEST_SUITE}}' '{{.cds.workspace}}/cmake_coverage.{{.cds.env.TEST_SUITE}}'
          - '[ ! -f nosetests-*.xml ] || worker upload nosetests-*.xml'

    requirements:
        - model: '{{ .cds.env.MODEL}}'
