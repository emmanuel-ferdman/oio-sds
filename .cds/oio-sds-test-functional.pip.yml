version: v1.0
name: oio-sds-test-functional
environment: oio-sds-env
jobs:
  - job: Run functional tests
    steps:

      - name: Checkout application
        checkout: '{{ .cds.workspace }}'

      - name: Install dependencies
        script: |+
          #!/bin/bash
          set -x
          . .cds/versions
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get purge -y --allow-remove-essential shim-signed  # To be deleted as soon as the model is corrected
          echo "deb [trusted=yes] http://read:{{.cds.proj.private_ovh_objectstorage_openio_read_password}}@last-private-ovh-objectstorage-openio.snap-priv.mirrors.ovh.net/ubuntu focal/main main" >> /etc/apt/sources.list.d/obsto.list
          echo "deb [trusted=yes] http://last-public-ovh-pcs.snap.mirrors.ovh.net/ubuntu focal main" >> /etc/apt/sources.list.d/obsto.list
          echo "deb [trusted=yes] http://${DEB_SNAPSHOT}-public.canonical.ubuntu.archive.snap.mirrors.ovh.net/ubuntu focal main" >> /etc/apt/sources.list.d/obsto.list
          # We have troubles with FoundationDB when systemd is restarted.
          # Prevent it from being upgraded (and thus restarted).
          SYSTEMD_VERSION=$(dpkg -s libsystemd0 | sed -n -E -e 's/^Version: (\w+)/\1/p')
          apt-mark hold libsystemd0 systemd
          apt update
          apt install -y "libsystemd-dev=$SYSTEMD_VERSION" $(tr '\n' ' ' < .cds/deps-ubuntu-focal.txt) ${GO_PACKAGE} ${PYTHON_PACKAGE} ${ZOOKEEPER_PACKAGE}
          systemctl stop apache2.service redis.service
          systemctl disable apache2.service redis.service
          # Configure environment
          echo "export COVERAGE_PROCESS_START=.coveragerc" > $HOME/oio-env.sh
          echo "export PATH=/opt/${GO_PACKAGE}/bin:$HOME/go/bin:$PATH" >> $HOME/oio-env.sh
          echo "export ZOOBINDIR=/opt/${ZOOKEEPER_PACKAGE}/bin"  >> $HOME/oio-env.sh
          echo "export ZOOLIBDIR=/opt/${ZOOKEEPER_PACKAGE}/lib"  >> $HOME/oio-env.sh
          echo "export ZOOINCDIR=/opt/${ZOOKEEPER_PACKAGE}/include/zookeeper"  >> $HOME/oio-env.sh
          echo 'export CMAKE_OPTS="-DENABLE_CODECOVERAGE=on -DCMAKE_INSTALL_PREFIX=/tmp/oio -DLD_LIBDIR=lib -DZK_LIBDIR=${ZOOLIBDIR} -DZK_INCDIR=${ZOOINCDIR}"' >> $HOME/oio-env.sh
          echo "export LD_LIBRARY_PATH=/opt/${GO_PACKAGE}/lib:/opt/${ZOOKEEPER_PACKAGE}/lib:/tmp/oio/lib" >> $HOME/oio-env.sh
          # tox does not read the file pip.conf, it uses the environment variable PIP_INDEX_URL
          echo "export PIP_INDEX_URL=https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/" >> $HOME/oio-env.sh
          source $HOME/oio-env.sh
          mkdir /tmp/oio
          /opt/${PYTHON_PACKAGE}/bin/python3 -m venv $HOME/oiovenv
          cat << EOF > $HOME/oiovenv/pip.conf
          [global]
          index-url = https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/
          [install]
          progress-bar = off
          EOF
          . $HOME/oiovenv/bin/activate
          env
          # FIXME(adu): Fix tox configuration file to support the new versions
          pip install --upgrade pip setuptools virtualenv "tox<4.0.0" -r test-requirements.txt
          go install github.com/axw/gocov/gocov@latest

          fdbtag="fdb-${FDB_VERSION}"
          worker cache pull $fdbtag
          dpkg -i fdb-packages/*.deb
          systemctl stop foundationdb.service
          systemctl disable foundationdb.service
          rm -rf fdb-packages
          docker login -u {{ .cds.proj.artifactory_user }} -p {{ .cds.proj.artifactory_token }} pu-objectstorage-default-docker.artifactory.ovhcloud.tools
          docker-compose -f tests/functional/rabbitmq/cluster-config/docker-compose.yml up -d
          # wait for the rabbitmq nodes to form a cluster
          until [ "$(docker inspect -f "{{.State.Health.Status}}" rabbit-1)" = "healthy" ]
          do
            sleep 1
          done
          sleep 1
          docker exec rabbit-1 rabbitmqctl await_online_nodes 3

      - name: Run functional tests
        script: |+
          #!/bin/bash
          . $HOME/oio-env.sh
          pgrep rsyslogd || rsyslogd &
          sysctl -w kernel.core_pattern='/tmp/core.%p.%E'
          ulimit -c unlimited
          ulimit -n 8192
          echo "DefaultLimitNOFILE=8192" >> /etc/systemd/system.conf
          . $HOME/oiovenv/bin/activate
          ./tools/oio-zk-cluster.sh bootstrap {{ .cds.env.ZK_CLUSTER }}
          ./tools/oio-zk-cluster.sh start {{ .cds.env.ZK_CLUSTER }}
          ./tools/oio-travis-suites.sh
          ./tools/oio-zk-cluster.sh stop {{ .cds.env.ZK_CLUSTER }}

      - name: Save failure logs
        always_executed: true
        optional: true
        script:
          - '[ -f everything.log ] && mv everything.log everything.{{.cds.env.TEST_SUITE}}.log && worker upload everything.{{.cds.env.TEST_SUITE}}.log || true'
          - '[ -f "/tmp/integrity.log" ] && mv "/tmp/integrity.log" integrity.{{.cds.env.TEST_SUITE}}.log && worker upload integrity.{{.cds.env.TEST_SUITE}}.log || true'

      - name: Save coverage and test information
        script:
          - . $HOME/oio-env.sh
          - mv '{{.cds.workspace}}/.coverage' '{{.cds.workspace}}/.coverage.{{.cds.env.TEST_SUITE}}'
          - mv '/tmp/cmake_coverage.output' '{{.cds.workspace}}/cmake_coverage.{{.cds.env.TEST_SUITE}}'
          - '[ -n "$(echo $HOME/go_coverage.output.*)" ] && (cd rawx; gocov convert $HOME/go_coverage.output.* > {{.cds.workspace}}/go_coverage.{{.cds.env.TEST_SUITE}}.json) || true'
          - worker upload '{{.cds.workspace}}/.coverage.{{.cds.env.TEST_SUITE}}' '{{.cds.workspace}}/cmake_coverage.{{.cds.env.TEST_SUITE}}'
          - '[ ! -f nosetests-*.xml ] || worker upload nosetests-*.xml'
          - '[ ! -s {{.cds.workspace}}/go_coverage.{{.cds.env.TEST_SUITE}}.json ] || worker upload {{.cds.workspace}}/go_coverage.{{.cds.env.TEST_SUITE}}.json'

    requirements:
        - model: '{{ .cds.env.MODEL}}'
