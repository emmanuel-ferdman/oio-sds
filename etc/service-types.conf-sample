# Service types declarations
# ---------------------------

[type:meta0]
score_expr=((num stat.cpu)>0) * ((num stat.io)>0) * ((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
# Defaults to 300s
score_timeout=3600
# Defaults to 5s
score_variation_bound=20
# Allow the service to be selected as soon as it is up and running.
# Defaults to true.
lock_at_first_register=false

[type:meta1]
score_expr=((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
score_timeout=120
lock_at_first_register=false

[type:meta2]
score_expr=((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
score_timeout=120

[type:rawx]
# Instead of one single score expression, it is possible to define one for
# reads ("get") and one for writes ("put"). Notice that even when there is
# only one expression, "get" and "put" scores can be locked independently.
#
# The ideas behind the following formula are:
# - >1: force the score to be zero when there is less than 1% space available
# - 1+: prevent the score to be zero when there is no CPU or IO available
# - âˆ›: normalize the score from 0 to 100
put_score_expr=((num stat.space)>1) * root(3,((1 + (num stat.cpu))*(num stat.space)*(1 + (num stat.io))))
get_score_expr=root(2,((1 + (num stat.cpu))*(1 + (num stat.io))))
score_timeout=120

[type:rdir]
score_expr=((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
score_timeout=120

[type:redis]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:foundationdb]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:account]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:xcute]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:echo]
score_expr=(num stat.cpu)
score_timeout=30

[type:oioproxy]
score_expr=(1 + (num stat.cpu))
score_timeout=120
# oioproxy services are stateless, we can use them as soon as they are up.
lock_at_first_register=false

[type:oioswift]
#score_expr=((num stat.cpu)>5) * (num stat.cpu)
score_expr=1 + (num stat.cpu)
score_timeout=120
lock_at_first_register=false

[type:beanstalkd]
# 1000000 ready jobs -> score = 0
score_expr=root(3, (num stat.cpu) * (num stat.space) * (100 - root(3, (num stat.jobs_ready))))
score_timeout=120
lock_at_first_register=false
