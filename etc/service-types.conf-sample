# Service types declarations
# ---------------------------

[type:meta0]
score_expr=((num stat.cpu)>0) * ((num stat.io)>0) * ((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
# Defaults to 300s
score_timeout=3600
# Defaults to 5s
score_variation_bound=20
# Allow the service to be selected as soon as it is up and running.
# Defaults to true.
lock_at_first_register=false

[type:meta1]
score_expr=((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
score_timeout=120
lock_at_first_register=false

[type:meta2]
score_expr=((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
score_timeout=120

[type:rawx]
# Instead of one single score expression, it is possible to define one for
# reads ("get") and one for writes ("put"). Notice that even when there is
# only one expression, "get" and "put" scores can be locked independently.
#
# The ideas behind the following PUT formula are:
# - details of the feature scaling contained in the "clamp" operator:
#   (x - [minimum availability]) * 100 / ([maximum availability] - [minimum availability])
#   * minimum availability: when availability falls below this value, the result is 0
#   * maximum availability: when availability goes above this value, the result is 100
# - space:
#   * force the value to 0 when space utilization is 80% (less than 20% available)
#   * give more weight to the space available on the volume (√)
# - CPU:
#   * keep the value at 100 unless CPU utilization exceeds 80% (more than 20% available)
#   * prevent the value from dropping below 1 (do not completely lose write axes in the case of infrastructure overload)
#   * force the value to 1 when CPU utilization is 95% (less than 5% available)
# - I/O:
#   * keep the value at 100 unless I/O utilization exceeds 20% (more than 80% available)
#   * prevent the value from dropping below 1 (do not completely lose write axes in the case of infrastructure overload)
#   * force the value to 1 when CPU utilization is 95% (less than 5% available)
# - global:
#   * guarantee linear degradation (no sudden drop) between the maximum value and the minimum value for each value
#   * normalize the score from 0 to 100 (∜)
put_score_expr=root(4, (pow(2, (clamp((((num stat.space) - 20) * 1.25), 0, 100))) * clamp((((num stat.cpu) - 5) * 6.666667), 1, 100) * clamp((((num stat.io) - 5) * 1.333333), 1, 100)))
# The ideas behind the following GET formula are:
# - details of the feature scaling contained in the "clamp" operator:
#   (x - [minimum availability]) * 100 / ([maximum availability] - [minimum availability])
#   * minimum availability: when availability falls below this value, the result is 0
#   * maximum availability: when availability goes above this value, the result is 100
# - space:
#   * ignore available space
# - CPU:
#   * keep the value at 100 unless CPU utilization exceeds 80% (more than 20% available)
#   * force the value to 1 when CPU utilization is 95% (less than 5% available)
# - I/O:
#   * keep the value at 100 unless I/O utilization exceeds 20% (more than 80% available)
#   * force the value to 1 when CPU utilization is 95% (less than 5% available)
# - global:
#   * guarantee linear degradation (no sudden drop) between the maximum value and the minimum value for each value
#   * normalize the score from 0 to 100 (√)
get_score_expr=root(2, (clamp((((num stat.cpu) - 5) * 6.666667), 0, 100) * clamp((((num stat.io) - 5) * 1.333333), 0, 100)))
score_timeout=120

[type:rdir]
score_expr=((num stat.space)>1) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
score_timeout=120

[type:redis]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:foundationdb]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:account]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:xcute]
score_expr=(1 + (num stat.cpu))
score_timeout=120

[type:echo]
score_expr=(num stat.cpu)
score_timeout=30

[type:oioproxy]
score_expr=(1 + (num stat.cpu))
score_timeout=120
# oioproxy services are stateless, we can use them as soon as they are up.
lock_at_first_register=false

[type:oioswift]
#score_expr=((num stat.cpu)>5) * (num stat.cpu)
score_expr=1 + (num stat.cpu)
score_timeout=120
lock_at_first_register=false

[type:beanstalkd]
# 1000000 ready jobs -> score = 0
score_expr=root(3, (num stat.cpu) * (num stat.space) * (100 - root(3, (num stat.jobs_ready))))
score_timeout=120
lock_at_first_register=false
